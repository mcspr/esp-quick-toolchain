From d2d5e3f40fddb923118c12485e3e5be09d646181 Mon Sep 17 00:00:00 2001
From: Maxim Prokhorov <prokhorov.max@outlook.com>
Date: Mon, 28 Apr 2025 10:52:26 +0000
Subject: [PATCH 2/2] -mforce-l32 for libgcc unwind and libsupc++

https://github.com/earlephilhower/esp-quick-toolchain/blob/master/patches/gcc10.3/

same as the original patchset
- apply makefile modifications (gcc-enable-mforcel32-eh.patch)
- update __builtin_strcmp references (gcc-stdcsupp-safe.patch)
- update __builtin_strlen references (gcc-unwind-safe.patch)

differently
- typeinfo & type_info are using class method with force-l32 target attribute
  code is shared between tinfo{,2}.cc, might as well
- forcibly cast the pointer in strlen to unsigned char to actually use -mforce-l32'ed code
---
 libgcc/Makefile.in                 |  4 ++--
 libgcc/unwind-dw2-fde.c            | 20 +++++++++++++++++++-
 libgcc/unwind-dw2.c                | 21 ++++++++++++++++++++-
 libstdc++-v3/libsupc++/Makefile.in |  2 +-
 libstdc++-v3/libsupc++/tinfo.cc    |  2 +-
 libstdc++-v3/libsupc++/tinfo2.cc   |  2 +-
 libstdc++-v3/libsupc++/typeinfo    | 23 +++++++++++++++++++++--
 7 files changed, 65 insertions(+), 9 deletions(-)

diff --git a/libgcc/Makefile.in b/libgcc/Makefile.in
index 0e46e9ef768..28a85e65716 100644
--- a/libgcc/Makefile.in
+++ b/libgcc/Makefile.in
@@ -864,7 +864,7 @@ endif
 # libgcc_eh.a, only LIB2ADDEH matters.  If we do, only LIB2ADDEHSTATIC and
 # LIB2ADDEHSHARED matter.  (Usually all three are identical.)
 
-c_flags := -fexceptions
+c_flags := -fexceptions -mforce-l32
 
 ifeq ($(enable_shared),yes)
 
@@ -887,7 +887,7 @@ endif
 # Build LIBUNWIND. Use -fno-exceptions so that the unwind library does
 # not generate calls to __gcc_personality_v0.
 
-c_flags := -fno-exceptions
+c_flags := -fno-exceptions -mforce-l32
 
 libunwind-objects += $(addsuffix $(objext),$(basename $(notdir $(LIBUNWIND))))
 
diff --git a/libgcc/unwind-dw2-fde.c b/libgcc/unwind-dw2-fde.c
index eb8f69e6245..6e52a6ea8ad 100644
--- a/libgcc/unwind-dw2-fde.c
+++ b/libgcc/unwind-dw2-fde.c
@@ -337,6 +337,24 @@ base_from_object (unsigned char encoding, const struct object *ob)
     }
 }
 
+/* Write our own version so this does not get replaced with `strlen` call
+   When building with -mforce-l32, pointer reads will be forcibly aligned */
+static size_t __mforcel32_strlen (const char *p)
+{
+  const unsigned char *s = (const unsigned char *) p;
+  size_t len = 0;
+
+  unsigned char c = *s;
+  while (c)
+    {
+      ++len;
+      ++s;
+      c = *s;
+    }
+
+  return len;
+}
+
 /* Return the FDE pointer encoding from the CIE.  */
 /* ??? This is a subset of extract_cie_info from unwind-dw2.c.  */
 
@@ -349,7 +367,7 @@ get_cie_encoding (const struct dwarf_cie *cie)
   _sleb128_t stmp;
 
   aug = cie->augmentation;
-  p = aug + strlen ((const char *)aug) + 1; /* Skip the augmentation string.  */
+  p = aug + __mforcel32_strlen ((const char *)aug) + 1; /* Skip the augmentation string.  */
   if (__builtin_expect (cie->version >= 4, 0))
     {
       if (p[0] != sizeof (void *) || p[1] != 0)
diff --git a/libgcc/unwind-dw2.c b/libgcc/unwind-dw2.c
index 0849e89cd34..9c6eab76de8 100644
--- a/libgcc/unwind-dw2.c
+++ b/libgcc/unwind-dw2.c
@@ -409,6 +409,25 @@ _Unwind_GetTextRelBase (struct _Unwind_Context *context)
 
 #include "md-unwind-support.h"
 
+
+/* Write our own version so this does not get replaced with `strlen` call
+   When building with -mforce-l32, pointer reads will be forcibly aligned */
+static size_t __mforcel32_strlen (const char *p)
+{
+  const unsigned char *s = (const unsigned char *) p;
+  size_t len = 0;
+
+  unsigned char c = *s;
+  while (c)
+    {
+      ++len;
+      ++s;
+      c = *s;
+    }
+
+  return len;
+}
+
 /* Extract any interesting information from the CIE for the translation
    unit F belongs to.  Return a pointer to the byte after the augmentation,
    or NULL if we encountered an undecipherable augmentation.  */
@@ -418,7 +437,7 @@ extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,
 		  _Unwind_FrameState *fs)
 {
   const unsigned char *aug = cie->augmentation;
-  const unsigned char *p = aug + strlen ((const char *)aug) + 1;
+  const unsigned char *p = aug + __mforcel32_strlen ((const char *)aug) + 1;
   const unsigned char *ret = NULL;
   _uleb128_t utmp;
   _sleb128_t stmp;
diff --git a/libstdc++-v3/libsupc++/Makefile.in b/libstdc++-v3/libsupc++/Makefile.in
index 732ab89c8a2..615e9e7ee6d 100644
--- a/libstdc++-v3/libsupc++/Makefile.in
+++ b/libstdc++-v3/libsupc++/Makefile.in
@@ -480,7 +480,7 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)
 # These bits are all figured out from configure.  Look in acinclude.m4
 # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.
 CONFIG_CXXFLAGS = \
-	$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)
+	$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS) -mforce-l32
 
 WARN_CXXFLAGS = \
 	$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once 
diff --git a/libstdc++-v3/libsupc++/tinfo.cc b/libstdc++-v3/libsupc++/tinfo.cc
index 3832cf6e389..c1d355fee17 100644
--- a/libstdc++-v3/libsupc++/tinfo.cc
+++ b/libstdc++-v3/libsupc++/tinfo.cc
@@ -47,7 +47,7 @@ operator== (const std::type_info& arg) const _GLIBCXX_NOEXCEPT
      take care to look at __name rather than name() when looking for
      the "pointer" prefix.  */
   return (&arg == this)
-    || (__name[0] != '*' && (__builtin_strcmp (name (), arg.name ()) == 0));
+    || (__name[0] != '*' && (__mforcel32_strcmp (name (), arg.name ()) == 0));
 #endif
 }
 
diff --git a/libstdc++-v3/libsupc++/tinfo2.cc b/libstdc++-v3/libsupc++/tinfo2.cc
index 585d71826a0..637a2913ce8 100644
--- a/libstdc++-v3/libsupc++/tinfo2.cc
+++ b/libstdc++-v3/libsupc++/tinfo2.cc
@@ -40,7 +40,7 @@ type_info::before (const type_info &arg) const _GLIBCXX_NOEXCEPT
      take care to look at __name rather than name() when looking for
      the "pointer" prefix.  */
   return (__name[0] == '*') ? name () < arg.name ()
-    :  __builtin_strcmp (name (), arg.name ()) < 0;
+    :  __mforcel32_strcmp (name (), arg.name ()) < 0;
 #endif
 }
 
diff --git a/libstdc++-v3/libsupc++/typeinfo b/libstdc++-v3/libsupc++/typeinfo
index fcc3077d060..3bb491038ed 100644
--- a/libstdc++-v3/libsupc++/typeinfo
+++ b/libstdc++-v3/libsupc++/typeinfo
@@ -163,6 +163,25 @@ namespace std
 #if ! __GXX_TYPEINFO_EQUALITY_INLINE
     bool __equal(const type_info&) const _GLIBCXX_NOEXCEPT;
 #endif
+
+    /* Write our own version so this does not get replaced with `strcmp` call
+       When building with -mforce-l32, pointer reads will be forcibly aligned */
+    static _GLIBCXX23_CONSTEXPR
+    int __attribute__((__target__("force-l32"))) __mforcel32_strcmp (const char *p1, const char *p2) _GLIBCXX_NOEXCEPT
+    {
+        const unsigned char *s1 = (const unsigned char *) p1;
+        const unsigned char *s2 = (const unsigned char *) p2;
+        unsigned char c1, c2;
+        do
+        {
+            c1 = (unsigned char) *s1++;
+            c2 = (unsigned char) *s2++;
+            if (c1 == '\0')
+                return c1 - c2;
+        }
+        while (c1 == c2);
+        return c1 - c2;
+    }
   };
 
 #if __GXX_TYPEINFO_EQUALITY_INLINE
@@ -174,7 +193,7 @@ namespace std
     // we can run into cases where type_info names aren't merged,
     // so we still need to do string comparison.
     if (__name[0] != '*' || __arg.__name[0] != '*')
-      return __builtin_strcmp (__name, __arg.__name) < 0;
+      return __mforcel32_strcmp (__name, __arg.__name) < 0;
 #else
     // On some targets we can rely on type_info's NTBS being unique,
     // and therefore address comparisons are sufficient.
@@ -202,7 +221,7 @@ namespace std
     return __equal(__arg);
 #elif !__GXX_MERGED_TYPEINFO_NAMES
     // Need to do string comparison.
-    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
+    return __name[0] != '*' && __mforcel32_strcmp (__name, __arg.name()) == 0;
 #else
     return false;
 #endif
-- 
2.49.0

