diff --git a/gcc/testsuite/gcc.target/xtensa/flashstring.c b/gcc/testsuite/gcc.target/xtensa/flashstring.c
new file mode 100644
index 00000000000..9512fbbb527
--- /dev/null
+++ b/gcc/testsuite/gcc.target/xtensa/flashstring.c
@@ -0,0 +1,13 @@
+/* { dg-do compile */
+/* { dg-options "-fdata-sections -mflash-string-section .test.section" } */
+
+
+const char a[] __attribute__((__section__(".test.section.123"))) = "aaaa123bbbb";
+
+const char b[] __attribute__((__section__(".test"))) = "bbbbccccdddd";
+
+char c[] = "cccc";
+
+/* { dg-final { scan-assembler ".section        .test.section.123,\"aMS\",@progbits" } } */
+/* { dg-final { scan-assembler ".section        .test,\"a\"" } } */
+/* { dg-final { scan-assembler ".section        .data.c,\"aw\"" } } */

diff --git a/gcc/config/xtensa/xtensa.opt b/gcc/config/xtensa/xtensa.opt
index b653e99d189..49422003a1a 100644
--- a/gcc/config/xtensa/xtensa.opt
+++ b/gcc/config/xtensa/xtensa.opt
@@ -71,3 +71,7 @@ Use windowed registers ABI.
 mstrict-align
 Target Var(xtensa_strict_alignment) Init(XTENSA_STRICT_ALIGNMENT_UNDEFINED)
 Do not use unaligned memory references.
+
+mflash-string-section
+Target RejectNegative Joined Separate
+-mflash-string-section <section> One or more section names, forcibly flagged as SHF_MERGE | SHF_STRINGS. Includes .irom.exceptionstring and .irom0.pstr by default.

diff --git a/gcc/config/xtensa/xtensa.cc b/gcc/config/xtensa/xtensa.cc
index 9beac932467..25356ea74c4 100644
--- a/gcc/config/xtensa/xtensa.cc
+++ b/gcc/config/xtensa/xtensa.cc
@@ -4350,6 +4350,20 @@ xtensa_multibss_section_type_flags (tree decl, const char *name, int reloc)
                 "%<.bss%> section");
     }

+  extern vec<const char*> *xtensa_flash_string_prefixes;
+
+  if (xtensa_flash_string_prefixes && xtensa_flash_string_prefixes->length())
+    {
+      for (const char *prefix : *xtensa_flash_string_prefixes)
+        {
+            if (startswith (name, prefix))
+            {
+                flags &= ~(SECTION_NOTYPE);
+                flags |= SECTION_MERGE | SECTION_STRINGS | (SECTION_ENTSIZE & 1);
+            }
+        }
+    }
+
   return flags;
 }

diff --git a/gcc/common/config/xtensa/xtensa-common.cc b/gcc/common/config/xtensa/xtensa-common.cc
index 49879cd9213..40e768e8a26 100644
--- a/gcc/common/config/xtensa/xtensa-common.cc
+++ b/gcc/common/config/xtensa/xtensa-common.cc
@@ -21,9 +21,61 @@ along with GCC; see the file COPYING3.  If not see
 #include "system.h"
 #include "coretypes.h"
 #include "tm.h"
+#include "opts.h"
+#include "flags.h"
 #include "common/common-target.h"
 #include "common/common-target-def.h"
 
+#undef TARGET_HANDLE_OPTION
+#define TARGET_HANDLE_OPTION xtensa_handle_option
+
+vec<const char*> *xtensa_flash_string_prefixes{};
+
+static const char* default_xtensa_flash_string_sections[] = {
+    ".irom.exceptionstring",
+    ".irom0.pstr",
+};
+
+static void
+xtensa_add_flash_string_section(const char* src)
+{
+  if (!xtensa_flash_string_prefixes)
+    {
+      xtensa_flash_string_prefixes = new vec<const char*>();
+      for (const char *section : default_xtensa_flash_string_sections)
+        xtensa_flash_string_prefixes->safe_push (section);
+    }
+
+  for (const char *section : *xtensa_flash_string_prefixes)
+    if (startswith (src, section))
+      return;
+
+  xtensa_flash_string_prefixes->safe_push (xstrdup (src));
+}
+
+static bool
+xtensa_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,
+		       struct gcc_options *opts_set ATTRIBUTE_UNUSED,
+		       const struct cl_decoded_option *decoded,
+		       location_t loc ATTRIBUTE_UNUSED)
+{
+  size_t code = decoded->opt_index;
+  const char *arg = decoded->arg;
+
+  switch (code)
+    {
+    case OPT_mflash_string_section:
+      xtensa_add_flash_string_section (arg);
+      break;
+
+    default:
+      break;
+    }
+
+  return true; /* [disabled]ing all otherwise */
+}
+
+
 /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */
 
 static const struct default_options xtensa_option_optimization_table[] =
